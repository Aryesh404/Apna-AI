import { useState, useEffect } from "react";
import "./App.css";
import ReactMarkdown from "react-markdown";
import Tesseract from "tesseract.js";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faTimes } from "@fortawesome/free-solid-svg-icons";

function App() {
  const [question, setQuestion] = useState("");
  const [answer, setAnswer] = useState("");
  const [generatingAnswer, setGeneratingAnswer] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [image, setImage] = useState(null);

  const SpeechRecognition =
    window.SpeechRecognition || window.webkitSpeechRecognition;
  const recognition = new SpeechRecognition();

  recognition.continuous = true;
  recognition.interimResults = false;
  recognition.lang = "en-US";

  const synth = window.speechSynthesis;

  useEffect(() => {
    recognition.onresult = (event) => {
      const transcript =
        event.results[event.results.length - 1][0].transcript;
      setQuestion(transcript);
      recognition.stop();
      setIsListening(false);
    };

    recognition.onerror = (event) => {
      console.error("Speech recognition error", event);
      recognition.stop();
      setIsListening(false);
    };
  }, []);

  async function generateAnswer(e) {
    setGeneratingAnswer(true);
    e.preventDefault();
    setAnswer("Apna AI Soch raha haiü§î...");
    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${
          import.meta.env.VITE_API_GENERATIVE_LANGUAGE_CLIENT
        }`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [{ parts: [{ text: question }] }],
          }),
        }
      );

      const data = await response.json();
      const answerText = data.candidates[0].content.parts[0].text;

      // Formatting the answer
      const formattedAnswer = `
## Answer üí≠
${answerText}

---

*Generated by Apna AI ‚öõ*
      `;

      setAnswer(formattedAnswer);

      const utterance = new SpeechSynthesisUtterance(answerText);
      utterance.onend = () => setIsSpeaking(false);
      synth.speak(utterance);
      setIsSpeaking(true);
      setIsPaused(false);
    } catch (error) {
      console.log(error);
      setAnswer("Sorry - Something went wrong. Please try again!");
    }

    setGeneratingAnswer(false);
  }

  const handleVoiceInput = () => {
    if (isListening) {
      recognition.stop();
    } else {
      recognition.start();
    }
    setIsListening(!isListening);
  };

  const handleSpeechToggle = () => {
    if (synth.speaking) {
      if (synth.paused) {
        synth.resume();
        setIsPaused(false);
      } else {
        synth.pause();
        setIsPaused(true);
      }
    }
  };

  const handleImageUpload = async (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(URL.createObjectURL(file));
      try {
        const {
          data: { text },
        } = await Tesseract.recognize(file, "eng");
        setQuestion(text);
      } catch (error) {
        console.log(error);
        setQuestion(
          "Sorry - Something went wrong with the image processing."
        );
      }
    }
  };

  const handleCancelImage = () => {
    setImage(null);
    setQuestion("");
  };

  return (
    <div className="bg-gradient-to-r from-blue-50 to-blue-100 h-screen p-3 flex flex-col justify-center items-center">
      <form
        onSubmit={generateAnswer}
        onKeyPress={(e) => {
          if (e.key === "Enter") {
            e.preventDefault(); // Prevent default form submission behavior
            document.getElementById("submit-btn").click(); // Triggers the button click
          }
        }}
        className="w-full md:w-2/3 lg:w-1/2 xl:w-1/3 text-center rounded-lg shadow-lg bg-white py-6 px-4 transition-all duration-500 transform hover:scale-105"
      >
        <h1 className="text-4xl font-bold text-blue-500 mb-4 animate-bounce">
          Apna AI ‚öõ
        </h1>
        <h3>Made with ‚ù§Ô∏è by Aryesh</h3>
        <textarea
          required
          className="input-box border border-gray-300 rounded-lg w-full my-2 min-h-fit p-3 transition-all duration-300 focus:border-blue-400 focus:shadow-lg"
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          placeholder="Ask anything"
        ></textarea>
        <input
          type="file"
          accept="image/*"
          onChange={handleImageUpload}
          className="my-2"
        />
        {image && (
          <div className="relative w-full md:w-2/3 lg:w-1/2 xl:w-1/3 text-center rounded-lg bg-white my-4 shadow-lg transition-all duration-500 transform hover:scale-105">
            <img src={image} alt="Uploaded" className="max-w-full h-auto" />
            <button
              type="button"
              onClick={handleCancelImage}
              className="absolute top-2 right-2 bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-all duration-300"
            >
              <FontAwesomeIcon icon={faTimes} />
            </button>
          </div>
        )}
        <button
          id="submit-btn"
          type="submit"
          className={`bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition-all duration-300 ${
            generatingAnswer ? "opacity-50 cursor-not-allowed" : ""
          }`}
          disabled={generatingAnswer}
        >
          Generate answer
        </button>
        <button
          type="button"
          className="bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition-all duration-300 ml-2"
          onClick={handleVoiceInput}
        >
          {isListening ? "Stop Listening" : "Voice Input"}
        </button>
      </form>
      <div className="answer-box w-full md:w-2/3 lg:w-1/2 xl:w-1/3 text-center rounded-lg bg-white my-4 shadow-lg transition-all duration-500 transform hover:scale-105">
        <ReactMarkdown className="p-4 text-answer">{answer}</ReactMarkdown>
      </div>
      {isSpeaking && (
        <button
          type="button"
          className="bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition-all duration-300 mt-2"
          onClick={handleSpeechToggle}
        >
          {isPaused ? "Resume Speech" : "Pause Speech"}
        </button>
      )}
    </div>
  );
}

export default App;
